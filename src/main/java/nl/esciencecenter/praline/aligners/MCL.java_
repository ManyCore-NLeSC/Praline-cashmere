package nl.esciencecenter.praline.aligners;


import org.jocl.Pointer;

import ibis.cashmere.constellation.Argument;
import ibis.cashmere.constellation.Buffer;
import ibis.cashmere.constellation.KernelLaunch;
import ibis.cashmere.constellation.CashmereNotAvailable;


class MCL {

    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, 
	    int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, 
	    float[] a, float[] b, float[] dynMatrix, int[] traceBack, 
	    float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, int[] sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Buffer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, float[] a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, float[] a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Buffer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Buffer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, float[] b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, float[] b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Buffer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Buffer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, float[] dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, float[] dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Buffer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Buffer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, int[] traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, int[] traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Buffer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Buffer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, float[] cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, float[] cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Buffer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Buffer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, Pointer a, Pointer b, Pointer dynMatrix, Pointer traceBack, Pointer cost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        launchAlignKernel(kl, lengthA, lengthB, sizeAlphabetMax, nrTracks, sizesAlphabet, true, a, true, b, true, dynMatrix, true, traceBack, true, cost, true, costGapStart, costGapExtend);
    }
    
    static void launchAlignKernel(KernelLaunch kl, int lengthA, int lengthB, int sizeAlphabetMax, int nrTracks, Pointer sizesAlphabet, boolean copysizesAlphabet, Pointer a, boolean copya, Pointer b, boolean copyb, Pointer dynMatrix, boolean copydynMatrix, Pointer traceBack, boolean copytraceBack, Pointer cost, boolean copycost, float costGapStart, float costGapExtend) throws CashmereNotAvailable {
        kl.setArgument(lengthA, Argument.Direction.IN);
        kl.setArgument(lengthB, Argument.Direction.IN);
        kl.setArgument(sizeAlphabetMax, Argument.Direction.IN);
        kl.setArgument(nrTracks, Argument.Direction.IN);
        if (copysizesAlphabet) {
            kl.setArgument(sizesAlphabet, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(sizesAlphabet);
        }
        if (copya) {
            kl.setArgument(a, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(a);
        }
        if (copyb) {
            kl.setArgument(b, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(b);
        }
        if (copydynMatrix) {
            kl.setArgument(dynMatrix, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(dynMatrix);
        }
        if (copytraceBack) {
            kl.setArgument(traceBack, Argument.Direction.INOUT);
        }
        else {
            kl.setArgumentNoCopy(traceBack);
        }
        if (copycost) {
            kl.setArgument(cost, Argument.Direction.IN);
        }
        else {
            kl.setArgumentNoCopy(cost);
        }
        kl.setArgument(costGapStart, Argument.Direction.IN);
        kl.setArgument(costGapExtend, Argument.Direction.IN);
    
        if (kl.getDeviceName().equals("fermi")) {
            int nrThreadsLengthA = Math.min(1024, lengthA);
            int nrBlocksLengthA = lengthA == 1 * nrThreadsLengthA ?
    1 :
    lengthA % (1 * nrThreadsLengthA) == 0 ?
        lengthA / (1 * nrThreadsLengthA) :
        lengthA / (1 * nrThreadsLengthA) + 1
;
            int nrThreadsNrThreadsLengthA = Math.min(32, nrThreadsLengthA);
            int nrWarpsNrThreadsLengthA = nrThreadsLengthA == 1 * nrThreadsNrThreadsLengthA ?
    1 :
    nrThreadsLengthA % (1 * nrThreadsNrThreadsLengthA) == 0 ?
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) :
        nrThreadsLengthA / (1 * nrThreadsNrThreadsLengthA) + 1
;
            kl.launch(nrThreadsNrThreadsLengthA * nrBlocksLengthA, nrWarpsNrThreadsLengthA * 1, 1 * 1, nrThreadsNrThreadsLengthA, nrWarpsNrThreadsLengthA, 1);
        }
        else {
            throw new CashmereNotAvailable("no compatible device found");
        }
    }
}
